
// Generated by Together


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Local Air Traffic Controller Screen:
 * Inputs events from LATC (a person), and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id2fh3ncko4qme4cko4swe5
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 */
public class LATC extends JFrame implements Observer, ActionListener {
    private JPanel listPanel;
    private JList<ManagementRecord> aircrafts;
    private DefaultListModel<ManagementRecord> listModelOfManagement;
    private JLabel flightStatus;
    private JLabel labelForFlightStatus;
    private JLabel flightCodes;
    private JLabel labelForFlightCodes;
    private JButton landingGranted;
    private JButton takeOffGranted;
    private JButton confirm;
    private JButton waitingForTaxi;
    private JButton flightInfo;
    /**
     * The Local Air Traffic Controller Screen interface has access to the AircraftManagementDatabase.
     *
     * @supplierCardinality 1
     * @clientCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;
    private int managementRecordIndex;
    private boolean buttonAvailability;

    public LATC(AircraftManagementDatabase aircraftManagementDatabase) {
        this.aircraftManagementDatabase = aircraftManagementDatabase;

        setTitle("LATC View");
        setLocation(400, 600);
        setSize(1000, 700);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());

        labelForFlightCodes = new JLabel("Flight Code: ");
        window.add(labelForFlightCodes);
        flightCodes = new JLabel("");
        window.add(flightCodes);

        labelForFlightStatus = new JLabel("Flight Status: ");
        window.add(labelForFlightStatus);
        flightStatus = new JLabel("");
        window.add(flightStatus);

        landingGranted = new JButton("Give Landing Permission");
        window.add(landingGranted);
        landingGranted.addActionListener(this);

        confirm = new JButton("Confirm Landing");
        window.add(confirm);
        confirm.addActionListener(this);

        takeOffGranted = new JButton("Give Take Off Permission");
        window.add(takeOffGranted);
        takeOffGranted.addActionListener(this);

        waitingForTaxi = new JButton("Wait For Taxi Permission");
        window.add(waitingForTaxi);
        waitingForTaxi.addActionListener(this);

        flightInfo = new JButton("Info of Flight");
        window.add(flightInfo);
        flightInfo.addActionListener(this);

        listPanel = new JPanel();

        listModelOfManagement = new DefaultListModel<ManagementRecord>();

        aircrafts = new JList<>(listModelOfManagement);

        aircrafts.addListSelectionListener(e -> itemSelected());

        JScrollPane scroll = new JScrollPane(aircrafts);

        scroll.setPreferredSize(new Dimension(500, 300));
        scroll.setMinimumSize(new Dimension(500, 300));

        listPanel.add(scroll);

        listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);

        updateRecords();

        window.add(listPanel);
        itemSelected();
        setVisible(true);

        aircraftManagementDatabase.addObserver(this);
    }

    private void updateRecords() {
        for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
            ManagementRecord managementRecord = aircraftManagementDatabase.getMR(i);

            if (managementRecord == null) {
                listModelOfManagement.set(i, null);
            } else if (managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("LANDING")
                    || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("DEPARTING_THROUGH_LOCAL_AIRSPACE")
                    || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("LANDED")
                    || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("AWAITING_TAXI")
                    || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("GROUND_CLEARANCE_GRANTED")) {
                listModelOfManagement.set(i, managementRecord);
            }
        }
    }

    private void itemSelected() {
        if (!aircrafts.getValueIsAdjusting()) {
            if (aircrafts.getSelectedValue() == null) {
                managementRecordIndex = -1;
                flightCodes.setText("UNKNOWN");
                flightStatus.setText("UNKNOWN");
                if (buttonAvailability) {
                    buttonAvailability = false;
                }
                updateButtons();
            } else {
                managementRecordIndex = aircrafts.getSelectedIndex();
                flightCodes.setText(aircraftManagementDatabase.getFlightCode(managementRecordIndex));
                flightStatus.setText(aircraftManagementDatabase.getStatus(managementRecordIndex));
                if (!buttonAvailability) {
                    buttonAvailability = true;
                }
                updateButtons();
            }
        }
    }

    private void updateButtons() {
      if (!buttonAvailability){
          landingGranted.setEnabled(false);
        takeOffGranted.setEnabled(false);
        confirm.setEnabled(false);
        flightInfo.setEnabled(false);
        waitingForTaxi.setEnabled(false);
      } else {
        String status = aircraftManagementDatabase.getStatus(managementRecordIndex);

        if (status.equalsIgnoreCase("GROUND_CLEARANCE_GRANTED")){
          landingGranted.setEnabled(true);
        } else{
            landingGranted.setEnabled(false);
        }
         if (status.equalsIgnoreCase("AWAITING_TAKEOFF")){
          takeOffGranted.setEnabled(true);
        } else {
            takeOffGranted.setEnabled(false);
         }
          if (status.equalsIgnoreCase("LANDING")){
              confirm.setEnabled(true);
          }else {
              confirm.setEnabled(false);
          }
          if (status.equalsIgnoreCase("READY_DEPART")){
              waitingForTaxi.setEnabled(true);
          } else {
              waitingForTaxi.setEnabled(false);
          }
        flightInfo.setEnabled(true);
      }
    }

    @Override
    public void update(Observable observable, Object o) {
       updateRecords();
       itemSelected();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == landingGranted){
            aircraftManagementDatabase.setStatus(managementRecordIndex, 4);
        }

        if (e.getSource() == confirm){
          aircraftManagementDatabase.setStatus(managementRecordIndex, 5);
        }

        if (e.getSource() == takeOffGranted){
          aircraftManagementDatabase.setStatus(managementRecordIndex, 18);
        }

        if (e.getSource() == waitingForTaxi){
          aircraftManagementDatabase.setStatus(managementRecordIndex, 16);
        }

        if (e.getSource() == flightInfo){
            int amountOfPassengers = aircraftManagementDatabase.getPassengerList(managementRecordIndex).getDetails().size();

            JOptionPane.showMessageDialog(null, "Flight Code of Flight: " + aircraftManagementDatabase.getFlightCode(managementRecordIndex) +
                    "\nFlight Status: " + aircraftManagementDatabase.getStatus(managementRecordIndex) + "\nComing From: " +
                    aircraftManagementDatabase.getItinerary(managementRecordIndex).getFrom() + "\nGoing To: " + aircraftManagementDatabase.getItinerary(managementRecordIndex).getTo() +
                    "\nNext Destination: " + aircraftManagementDatabase.getItinerary(managementRecordIndex).getNext() + "\nNumber of Passengers on board: " + amountOfPassengers);
        }
    }

}
