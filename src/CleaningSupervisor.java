
// Generated by Together


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Cleaning Supervisor Screen:
 * Inputs events from the Cleaning Supervisor, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame
        implements ActionListener, Observer {
  private AircraftManagementDatabase aircraftManagementDatabase;
  /**
  * The Cleaning Supervisor Screen interface has access to the AircraftManagementDatabase.
  * @clientCardinality 1
  * @supplierCardinality 1
  * @label accesses/observes
  * @directed*/
  //private AircraftManagementDatabase lnkUnnamed;
  private JButton awaitMaintenance;
  private JButton awaitRepair;
  private JButton doneCleaning;

  private JTextField displayCodes;
  private JTextField displayStatus;

  private JPanel listPanel;
  private JList<ManagementRecord> aircrafts;
  private DefaultListModel<ManagementRecord> listModelOfManagement;
  private JLabel flightStatus;
  private JLabel labelForFlightStatus;
  private JLabel flightCodes;
  private JLabel labelForFlightCodes;
  private JTextField display;
  boolean buttonAvailability;
  int managementRecordIndex;


  public CleaningSupervisor(AircraftManagementDatabase aircraftManagementDatabase) {
    this.aircraftManagementDatabase = aircraftManagementDatabase;

    setSize(350,150);
    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    Container window = getContentPane();
    window.setLayout(new FlowLayout());

    // maintenance button
    awaitMaintenance = new JButton("Await Maintenance");
    window.add(awaitMaintenance);
    awaitMaintenance.addActionListener(this);


    // waiting for repair button
    awaitRepair = new JButton("Await Repair");
    window.add(awaitRepair);
    awaitRepair.addActionListener(this);

    //done cleaning button
    doneCleaning = new JButton("Done Cleaning");
    window.add(doneCleaning);
    doneCleaning.addActionListener(this);


    labelForFlightCodes = new JLabel("Flight Code: ");
    window.add(labelForFlightCodes);
    flightCodes = new JLabel("");
    window.add(flightCodes);

    labelForFlightStatus = new JLabel("Flight Status: ");
    window.add(labelForFlightCodes);
    flightStatus = new JLabel("");
    window.add(flightStatus);

    setVisible(true);
    show();

    //new list of aircrafts that need cleaning/repairs
    listPanel = new JPanel();
    listModelOfManagement = new DefaultListModel<>();
    aircrafts = new JList<>(listModelOfManagement);
    aircrafts.addListSelectionListener(e -> itemSelected());
    JScrollPane scroll = new JScrollPane(aircrafts);
    scroll.setPreferredSize(new Dimension(500, 300));
    scroll.setMinimumSize(new Dimension(500, 300));

    listPanel.add(scroll);
    listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);
  }

  private void updateButtons() {

    if (!buttonAvailability) {
      awaitMaintenance.setEnabled(false);
      awaitRepair.setEnabled(false);
      doneCleaning.setEnabled(false);
    } else {

      String status = aircraftManagementDatabase.getStatus(managementRecordIndex);
      if (status.equalsIgnoreCase("READY_CLEAN_AND_MAINT")) {
        awaitMaintenance.setEnabled(true);
      } else {
        awaitMaintenance.setEnabled(false);
      }
      if (status.equalsIgnoreCase("AWAIT_REPAIR")) {
        awaitRepair.setEnabled(true);
      } else {
        awaitRepair.setEnabled(false);
      }
      if (status.equalsIgnoreCase("OK_AWAIT_CLEAN")) {
        doneCleaning.setEnabled(true);
      } else {
        doneCleaning.setEnabled(false);
      }
//      if (status.equalsIgnoreCase(anotherString:"FAULTY_AWAIT_CLEAN")) {
//        awaitMaintenance.setEnabled(true);
//        awaitRepair.setEnabled(true);
//      } else {
//        awaitMaintenance.setEnabled(false);
//        awaitRepair.setEnabled(false);
//      }
//      if (status.equalsIgnoreCase(anotherString:"CLEAN_AWAIT_MAINT")) {
//        awaitMaintenance.setEnabled(true);
//        doneCleaning.setEnabled(true);
//      } else {
//        awaitMaintenance.setEnabled(false);
//        doneCleaning.setEnabled(false);
//      }
      }
  }

  private void updateRecords() {
    for (int i=0; i<aircraftManagementDatabase.maxMRs; i++) {
      ManagementRecord managementRecord = aircraftManagementDatabase.getMR(i);
      if (managementRecord == null) {
        listModelOfManagement.set(i,null);
      } else if ( managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("FAULTY_AWAIT_CLEAN")
      ||  managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("READY_CLEAN_AND_MAINT")
      || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("CLEAN_AWAIT_MAINT")
      || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("OK_AWAIT_CLEAN")
      ||  managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("AWAIT_REPAIR")) {
        listModelOfManagement.set(i,managementRecord);
      }
    }
  }
  private void itemSelected() {
    if (!aircrafts.getValueIsAdjusting()) {
      if (aircrafts.getSelectedValue() == null) {
        managementRecordIndex = -1;
        flightCodes.setText("UNKNOWN");
        flightStatus.setText("UNKNOWN");
      if (buttonAvailability) {
      buttonAvailability = false;
      }
      updateButtons();
      } else {
        managementRecordIndex = aircrafts.getSelectedIndex();
        flightCodes.setText(aircraftManagementDatabase.getFlightCode(managementRecordIndex));
        flightStatus.setText(aircraftManagementDatabase.getFlightStatus(managementRecordIndex));
        if (!buttonAvailability) {
          buttonAvailability = true;
        }
        updateButtons();
      }
    }
  }

  @Override
  public void actionPerformed(ActionEvent e) {
    if (e.getSource() == awaitMaintenance) {
        aircraftManagementDatabase.setStatus(managementRecordIndex, Integer.parseInt("OK_AWAIT_CLEAN"));
    }
    else if (e.getSource() == awaitRepair) {
      aircraftManagementDatabase.setStatus(managementRecordIndex, Integer.parseInt("AWAIT_REPAIR"));
    }
    else if (e.getSource() == doneCleaning) {
      aircraftManagementDatabase.setStatus(managementRecordIndex, Integer.parseInt("READY_CLEAN_AND_MAINT"));
    }
    }


  @Override
  public void update(Observable o, Object arg) {
    updateRecords();
  }
}
