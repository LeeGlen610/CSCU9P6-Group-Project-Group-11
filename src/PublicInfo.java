
// Generated by Together


import javax.management.AttributeList;
import javax.swing.*;
import java.awt.*;
import java.awt.image.TileObserver;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements Observer {
  /**
  * Each Public Information Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase aircraftManagementDatabase;
  private JLabel labelForFlightStatus;
  private JLabel flightStatus;
  private JLabel labelForFlightCodes;
  private JLabel flightCodes;
  private JPanel listPanel;
  private JList<ManagementRecord> aircrafts;
  private DefaultListModel<ManagementRecord> listModelOfManagement;
  private int managementRecordIndex = -1;

  public PublicInfo(AircraftManagementDatabase aircraftManagementDatabase) {
    this.aircraftManagementDatabase = aircraftManagementDatabase;

    setTitle("Public Info View");
    setLocation(150, 150);
    setSize(550, 500);
    Container window = getContentPane();
    window.setLayout(new FlowLayout());

    labelForFlightCodes = new JLabel("Flight Code: ");
    window.add(labelForFlightCodes);
    flightCodes = new JLabel("");
    window.add(flightCodes);

    labelForFlightStatus = new JLabel("Flight Status: ");
    window.add(labelForFlightStatus);
    flightStatus = new JLabel("");
    window.add(flightStatus);

    listPanel = new JPanel();

    listModelOfManagement = new DefaultListModel<ManagementRecord>();

    aircrafts = new JList<>(listModelOfManagement);

    aircrafts.addListSelectionListener(e -> itemSelected());

    JScrollPane scroll = new JScrollPane(aircrafts);

    scroll.setPreferredSize(new Dimension(500, 300));
    scroll.setMinimumSize(new Dimension(500, 300));

    listPanel.add(scroll);

    listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);

    updateRecords();
    window.add(listPanel);
    setVisible(true);

    aircraftManagementDatabase.addObserver(this);
  }

  private void updateRecords() {
    for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
        ManagementRecord managementRecord = aircraftManagementDatabase.getMR(i);

        if (managementRecord == null){
          listModelOfManagement.set(i, null);
        } else {
          listModelOfManagement.set(i, managementRecord);
        }
    }
  }

  private void itemSelected() {
    if (!aircrafts.getValueIsAdjusting()) {
      if (aircrafts.getSelectedValue() == null) {
        managementRecordIndex = -1;
        flightCodes.setText("UNKNOWN");
        flightStatus.setText("UNKNOWN");
      } else {
        managementRecordIndex = aircrafts.getSelectedIndex();
        flightCodes.setText(aircraftManagementDatabase.getFlightCode(managementRecordIndex));
        flightStatus.setText(aircraftManagementDatabase.getStatus(managementRecordIndex));
      }
    }
  }

  @Override
  public void update(Observable o, Object arg) {
      updateRecords();
  }
}
