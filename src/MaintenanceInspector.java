
// Generated by Together


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Maintenance Inspector Screen:
 * Inputs events from the Maintenance Inspector, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements ActionListener, Observer {
  private JList<ManagementRecord> aircrafts;
  private JLabel labelForFlightStatus;
  private JLabel flightStatus;
  private JLabel flightCodes;
  private JButton foundFault;
  private JButton awaitingCleaning;
  private JButton faultFoundAwait;
  private JButton allDone;
  private DefaultListModel<ManagementRecord> listModelOfManagement;
  private JLabel labelForFlightCodes;
  private JPanel listPanel;
  /**  The Maintenance Inspector Screen interface has access to the AircraftManagementDatabase.
  * @clientCardinality 1
  * @supplierCardinality 1
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase aircraftManagementDatabase;
  private int managementRecordIndex;
  private boolean buttonAvailability;

  public MaintenanceInspector(AircraftManagementDatabase aircraftManagementDatabase) {
    this.aircraftManagementDatabase = aircraftManagementDatabase;

    setTitle("Maintenance!");
    setSize(450,650);
    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    Container window = getContentPane();
    window.setLayout(new FlowLayout());

    labelForFlightCodes = new JLabel("Flight Code: ");
    window.add(labelForFlightCodes);
    flightCodes = new JLabel("");
    window.add(flightCodes);

    labelForFlightStatus = new JLabel("Flight Status: ");
    window.add(labelForFlightStatus);
    flightStatus = new JLabel("");
    window.add(flightStatus);

    allDone = new JButton("Maintenance Finished!");
    allDone.addActionListener(this);
    window.add(allDone);

    faultFoundAwait = new JButton("Fault Found! Awaiting Cleaning!");
    faultFoundAwait.addActionListener(this);
    window.add(faultFoundAwait);

    foundFault = new JButton("Found A Fault!");
    foundFault.addActionListener(this);
    window.add(foundFault);

    awaitingCleaning = new JButton("Await Cleaning!");
    awaitingCleaning.addActionListener(this);
    window.add(awaitingCleaning);

    listPanel = new JPanel();
    listModelOfManagement = new DefaultListModel<>();
    aircrafts = new JList<>(listModelOfManagement);
    aircrafts.addListSelectionListener(e -> itemSelected());
    JScrollPane scroll = new JScrollPane(aircrafts);
    scroll.setPreferredSize(new Dimension(500, 300));
    scroll.setMinimumSize(new Dimension(500,  300));

    listPanel.add(scroll);

    listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);

    updateRecords();
    window.add(listPanel);
    setVisible(true);
    itemSelected();



    listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);

    aircraftManagementDatabase.addObserver(this);
  }

  private void updateRecords() {
    for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
      ManagementRecord managementRecord = aircraftManagementDatabase.getMR(i);
      if (managementRecord == null) {
        listModelOfManagement.set(i, null);
      } else if (managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("FAULTY_AWAIT_CLEAN")
              || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("READY_CLEAN_AND_MAINT")
              || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("CLEAN_AWAIT_MAINT")
              || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("OK_AWAIT_CLEAN")
              || managementRecord.getStatus(managementRecord.getStatus()).equalsIgnoreCase("AWAIT_REPAIR")) {
        listModelOfManagement.set(i, managementRecord);
      }//END IF/ELSE
    } //END FOR
  }//END METHOD addRecords

  private void itemSelected() {
    if (!aircrafts.getValueIsAdjusting()) {
      if (aircrafts.getSelectedValue() == null) {
        managementRecordIndex = -1;
        flightCodes.setText("UNKNOWN");
        flightStatus.setText("UNKNOWN");
        if (buttonAvailability) {
          buttonAvailability = false;
        }
        updateButtons();
      } else {
        managementRecordIndex = aircrafts.getSelectedIndex();
        flightCodes.setText(aircraftManagementDatabase.getFlightCode(managementRecordIndex));
        flightStatus.setText(aircraftManagementDatabase.getStatus(managementRecordIndex));
        if (!buttonAvailability) {
          buttonAvailability = true;
        }
        updateButtons();
      }
    }
  }

  private void updateButtons() {
    if (!buttonAvailability){
      allDone.setEnabled(false);
      foundFault.setEnabled(false);
      awaitingCleaning.setEnabled(false);
      faultFoundAwait.setEnabled(false);
    } else {
      String status = aircraftManagementDatabase.getStatus(managementRecordIndex);

      if (status.equalsIgnoreCase("CLEAN_AWAIT_MAINT")){
        allDone.setEnabled(true);
      } else {
        allDone.setEnabled(false);
      }
      if (status.equalsIgnoreCase("READY_CLEAN_AND_MAINT") || status.equalsIgnoreCase("CLEAN_AWAIT_MAINT")) {
        foundFault.setEnabled(true);
      } else {
        foundFault.setEnabled(false);
      }

      if (status.equalsIgnoreCase("READY_CLEAN_AND_MAINT")){
        awaitingCleaning.setEnabled(true);
      } else {
        awaitingCleaning.setEnabled(false);
      }

      if (status.equalsIgnoreCase("FAULTY_AWAIT_CLEAN")){
        faultFoundAwait.setEnabled(true);
      } else{
        faultFoundAwait.setEnabled(false);
      }

    }
  }

  @Override
  public void actionPerformed(ActionEvent e) {
      if (e.getSource() == foundFault){
        String fault;
        while (true){
            fault = JOptionPane.showInputDialog("Enter The Fault Found!");
            if (fault.isEmpty()){
              JOptionPane.showMessageDialog(null, "Please Enter A Fault");
            } else if (fault == null){
              break;
            }
            break;
          }
        if (fault == null){
          return;
        } else {
          aircraftManagementDatabase.faultsFound(managementRecordIndex, fault);
        }
      }

      if (e.getSource() == awaitingCleaning){
        aircraftManagementDatabase.setStatus(managementRecordIndex, 11);
      }

      if (e.getSource() == faultFoundAwait){
        aircraftManagementDatabase.setStatus(managementRecordIndex, 12);
      }

      if (e.getSource() == allDone){
        aircraftManagementDatabase.setStatus(managementRecordIndex, 13);
      }

  }

  @Override
  public void update(Observable o, Object arg) {
    updateRecords();
    itemSelected();
  }
}
