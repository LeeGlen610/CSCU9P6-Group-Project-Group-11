
// Generated by Together


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully emarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements Observer, ActionListener {
/**
  *  The GateConsole interface has access to the GateInfoDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  GateInfoDatabase gateInfoDatabase;

/**
  *  The GateConsole interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @directed
  * @label accesses/observes*/
  private AircraftManagementDatabase aircraftManagementDatabase;

/**
 * This gate's gateNumber
 * - for identifying this gate's information in the GateInfoDatabase.
 */
  private int gateNumber;

  private int assignedManagementRecordIndex; // assigned management index number
  private ManagementRecord assignedMR; // assigned management record

  //Button and labels
  private JButton buttonDocked;
  private JButton buttonDisembarked;
  private JButton buttonAddPassenger;
  private JButton buttonBoardingComplete;
  private JButton buttonShowPassengers;
  private JLabel gateStatusLabel;
  private JLabel gateStatus;
  private JLabel labelFlightCode;
  private JLabel flightCode;
  private JLabel labelFlightStatus;
  private JLabel flightStatus;
  private JPanel listPanel = new JPanel();
  private JList<ManagementRecord> aircrafts;
  private DefaultListModel<ManagementRecord> listModelOfManagement;

  public GateConsole(AircraftManagementDatabase aircraftManagementDatabase, GateInfoDatabase gateInfoDatabase, int gateNumber) {
    this.gateInfoDatabase = gateInfoDatabase;
    this.aircraftManagementDatabase = aircraftManagementDatabase;
    this.gateNumber = gateNumber;


    setTitle("Gate Console View for Gate " + gateNumber);
    setLocation(500, 500);
    setSize(700, 400);
    Container window = getContentPane();
    window.setLayout(new FlowLayout());
    setVisible(true);

    gateStatusLabel = new JLabel("Gate Status:");
    window.add(gateStatusLabel);
    gateStatus = new JLabel("");
    window.add(gateStatus);

    labelFlightCode = new JLabel("Flight Code:");
    window.add(labelFlightCode);
    flightCode = new JLabel("");
    window.add(flightCode);

    labelFlightStatus = new JLabel("Flight Status:");
    window.add(labelFlightStatus);
    flightStatus = new JLabel("");
    window.add(flightStatus);

    buttonDocked = new JButton("Dock Aircraft");
    window.add(buttonDocked);

    buttonDisembarked = new JButton("Disembark Complete");
    window.add(buttonDisembarked);

    buttonAddPassenger = new JButton("Add Passenger");
    window.add(buttonAddPassenger);

    buttonBoardingComplete = new JButton("Boarding Complete");
    window.add(buttonBoardingComplete);

    buttonShowPassengers = new JButton("Show Passengers");
    window.add(buttonShowPassengers);


    listModelOfManagement = new DefaultListModel<ManagementRecord>();

    aircrafts = new JList<>(listModelOfManagement);

    JScrollPane scroll = new JScrollPane(aircrafts);

    scroll.setPreferredSize(new Dimension(400, 100));
    scroll.setMinimumSize(new Dimension(400, 100));

    listPanel.add(scroll);
    window.add(listPanel);

    listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);


    updateLabels();
    updateRecords();


    gateInfoDatabase.addObserver(this);
    aircraftManagementDatabase.addObserver(this);
  }

  /**
   * Updates the labels on the gate console.
   */
  private void updateLabels() {
    int statusOfGate = gateInfoDatabase.getStatus(gateNumber); //status number of gate
    gateStatus.setText(statusOfGate(statusOfGate)); //sets the text of the lebel for gate status

    //if the gate is not free
    if(gateInfoDatabase.getStatus(gateNumber) != 0){
      assignedManagementRecordIndex = gateInfoDatabase.assignedmCode(gateNumber); //get assigned management record mCode
      assignedMR = aircraftManagementDatabase.getMR(assignedManagementRecordIndex); //get assigned management record
      flightCode.setText(assignedMR.getFlightCode()); //sets text of flight code label
      flightStatus.setText(String.valueOf(assignedMR.getStatus(assignedManagementRecordIndex))); //sets text of flight status label
    } //end if
  }

  /**
   * Returns the status of the gate as a text
   *
   * @param status Status number
   * @return Status as text
   */
  private String statusOfGate(int status){
    switch (status){
      case 0:
        return "FREE";
      case 1:
        return "RESERVED";
      case 2:
        return "OCCUPIED";
      default:
        return "UNKNOWN";
    }
  }

  /**
   * Adds the assigned management record to the JList
   */
  private void updateRecords() {
      if (assignedMR == null) {
        listModelOfManagement.set(0, null);
      } else {
        listModelOfManagement.set(0, assignedMR);
      }
  }

  @Override
  public void update(Observable o, Object arg) {
    updateLabels();
    updateRecords();
  }

  @Override
  public void actionPerformed(ActionEvent e) {
    if(e.getSource() == buttonDocked) {
      aircraftManagementDatabase.setStatus(assignedManagementRecordIndex, 7);
      gateInfoDatabase.docked(gateNumber);
    } //end if

    if(e.getSource() == buttonDisembarked){
      PassengerList list = aircraftManagementDatabase.getPassengerList(assignedManagementRecordIndex);
      list.passengersLeft();
      aircraftManagementDatabase.setStatus(assignedManagementRecordIndex, 8);
    } //end if

    if(e.getSource() == buttonAddPassenger){
      PassengerDetails passengerName = new PassengerDetails(showTextPrompt("Passenger Name"));
      aircraftManagementDatabase.addPassenger(assignedManagementRecordIndex, passengerName);
    } //end if

    if (e.getSource() == buttonBoardingComplete){
      aircraftManagementDatabase.setStatus(assignedManagementRecordIndex, 15);
      updateLabels();
    } //end if
  }

  /**
   * Displays a text prompt for the user to enter text
   */
  public String showTextPrompt(String title) {
    return JOptionPane.showInputDialog(
            this,
            title,
            title,
            JOptionPane.PLAIN_MESSAGE);
  }
}
