
// Generated by Together


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

/**
 * An interface to SAAMS:
 * A Ground Operations Controller Screen:
 * Inputs events from GOC (a person), and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sending them messages to change the gate or aircraft status information.
 * This class also registers as an observer of the GateInfoDatabase and the AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id2wdkkcko4qme4cko4svm2.node36
 * @url element://model:project::SAAMS/design:view:::id2wdkkcko4qme4cko4svm2
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1bl79cko4qme4cko4sw5j
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 */
public class GOC extends JFrame implements ActionListener, Observer {
    /**
     * The Ground Operations Controller Screen interface has access to the GateInfoDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private GateInfoDatabase gateInfoDatabase;
    /**
     * The Ground Operations Controller Screen interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    private JLabel labelForFlightCodes;
    private JLabel flightCodes;
    private JLabel labelForFlightStatus;
    private JLabel flightStatus;
    private JLabel firstGateLabel;
    private JLabel firstGateCurrentStatus;
    private JLabel secondGateLabel;
    private JLabel secondGateCurrentStatus;
    private JPanel listPanel;
    private JButton okGroundClearance;
    private JButton allocateAGate;
    private JButton taxi;
    private JList<ManagementRecord> aircrafts;
    private DefaultListModel<ManagementRecord> listModelOfManagement;
    private int managementRecordIndex = -1;
    private boolean buttonAvaliablity = false;

    public GOC(AircraftManagementDatabase aircraftManagementDatabase, GateInfoDatabase gateInfoDatabase) {
        this.aircraftManagementDatabase = aircraftManagementDatabase;
        this.gateInfoDatabase = gateInfoDatabase;

        setTitle("GOC View");
        setLocation(150, 150);
        setSize(1000, 500);
        Container window = getContentPane();
        window.setLayout(new FlowLayout());

        labelForFlightCodes = new JLabel("Flight Code: ");
        window.add(labelForFlightCodes);
        flightCodes = new JLabel("");
        window.add(flightCodes);

        labelForFlightStatus = new JLabel("Flight Status: ");
        window.add(labelForFlightStatus);
        flightStatus = new JLabel("");
        window.add(flightStatus);

        firstGateLabel = new JLabel("Gate1: ");
        window.add(firstGateLabel);
        firstGateCurrentStatus = new JLabel("Status is FREE");
        window.add(firstGateCurrentStatus);

        secondGateLabel = new JLabel("Gate2: ");
        window.add(secondGateLabel);

        secondGateCurrentStatus = new JLabel("Status is FREE");
        window.add(secondGateCurrentStatus);

        okGroundClearance = new JButton("Good For Ground Clearance");
        window.add(okGroundClearance);
        okGroundClearance.addActionListener(this);

        allocateAGate = new JButton("Allocate A Gate To Flight");
        window.add(allocateAGate);
        allocateAGate.addActionListener(this);

        taxi = new JButton("Taxi Flight To Gate");
        window.add(taxi);
        taxi.addActionListener(this);

        listPanel = new JPanel();

        listModelOfManagement = new DefaultListModel<ManagementRecord>();

        aircrafts = new JList<>(listModelOfManagement);

        aircrafts.addListSelectionListener(e -> itemSelected());

        JScrollPane scroll = new JScrollPane(aircrafts);

        scroll.setPreferredSize(new Dimension(500, 300));
        scroll.setMinimumSize(new Dimension(500, 300));

        listPanel.add(scroll);

        listModelOfManagement.setSize(aircraftManagementDatabase.maxMRs);

        updateRecords();
        updateGates();
        window.add(listPanel);
        itemSelected();
        setVisible(true);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        aircraftManagementDatabase.addObserver(this);
        gateInfoDatabase.addObserver(this);
    }

    private void updateRecords() {
        for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
            ManagementRecord managementRecord = aircraftManagementDatabase.getMR(i);

            if (managementRecord == null) {
                listModelOfManagement.set(i, null);
            } else {
                listModelOfManagement.set(i, managementRecord);
            }
        }
    }

    private void itemSelected() {
        if (!aircrafts.getValueIsAdjusting()) {
            if (aircrafts.getSelectedValue() == null) {
                managementRecordIndex = -1;
                flightCodes.setText("UNKNOWN");
                flightStatus.setText("UNKNOWN");
                if (buttonAvaliablity) {
                    buttonAvaliablity = false;
                }
                updateButtons();
            } else {
                managementRecordIndex = aircrafts.getSelectedIndex();
                flightCodes.setText(aircraftManagementDatabase.getFlightCode(managementRecordIndex));
                flightStatus.setText(aircraftManagementDatabase.getStatus(managementRecordIndex));
                if (!buttonAvaliablity) {
                    buttonAvaliablity = true;
                }
                updateButtons();
            }
        }
    }

    public void updateButtons() {
      if (!buttonAvaliablity) {
        allocateAGate.setEnabled(false);
        okGroundClearance.setEnabled(false);
        taxi.setEnabled(false);

      } else {
        String status = aircraftManagementDatabase.getStatus(managementRecordIndex);

        if (status.equals("WAITING_TO_LAND")) {
            okGroundClearance.setEnabled(true);
        } else {
            okGroundClearance.setEnabled(false);
        }

        if (status.equals("AWAITING_TAXI")) {
              taxi.setEnabled(true);
        }else {
            taxi.setEnabled(false);
        }

        int gateStatus[] = gateInfoDatabase.getStatuses();
        int gateArraySize = gateStatus.length;
        int currentStatus = 0;
        for (int i = 0; i < gateArraySize; i++) {
          if (gateStatus[i] == 0) {
            currentStatus = gateStatus[i];
          }
        }
        if ((status.equals("LANDED")) && currentStatus == 0) {
            allocateAGate.setEnabled(true);
        } else {
            allocateAGate.setEnabled(false);
        }
      }
    }

    public void updateGates(){
        int firstGateStatus = gateInfoDatabase.getStatus(0);
        int secondGateStatus = gateInfoDatabase.getStatus(1);
        firstGateCurrentStatus.setText(statusOfGate(firstGateStatus));
        secondGateCurrentStatus.setText(statusOfGate(secondGateStatus));
    }

    public String statusOfGate(int status){
        switch (status){
            case 0:
                return "FREE";
            case 1:
                return "RESERVED";
            case 2:
                return "OCCUPIED";
            default:
                return "UNKNOWN";
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == okGroundClearance) {
            aircraftManagementDatabase.setStatus(managementRecordIndex, 3);
        }

        if (e.getSource() == allocateAGate) {
            int recordIndex = -1;
            int maxNumberOfGates = gateInfoDatabase.getStatuses().length;

            // search through and find a free gate
            for (int i = 0; i < maxNumberOfGates; i++) {
                if (gateInfoDatabase.getStatus(i) == 0) {
                    recordIndex = i;
                    break;
                }
            }

            if (recordIndex == -1) {
                JOptionPane.showMessageDialog(null, "No gates are currently free!");
            } else {
                gateInfoDatabase.allocate(recordIndex, managementRecordIndex);
                aircraftManagementDatabase.taxiTo(managementRecordIndex, recordIndex);
                aircraftManagementDatabase.setStatus(managementRecordIndex, 6);
            }

        }

        if (e.getSource() == taxi) {

            int assignedGate = aircraftManagementDatabase.getGateNumber(managementRecordIndex);

            aircraftManagementDatabase.setStatus(managementRecordIndex, 17);
            gateInfoDatabase.departed(assignedGate);
        }
    }

    @Override
    public void update(Observable observable, Object o) {
        updateRecords();
        updateGates();
        itemSelected();
    }
}
